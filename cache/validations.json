{
  "version": "3.2",
  "log": [
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "7f49b3f46d07d6efdba49d18c574392b28158d3374784c52fff6e42162c9052c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "29bd83f15a9dad82640aada1109b5932e0e69a6fe646c7f52d210b9c4c7dc510",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "00b63ba3d0a4d6d17cdab9b99f66d859d64f571370b400fb6a3ef1bf6e4c099a",
          "withoutMetadata": "00b63ba3d0a4d6d17cdab9b99f66d859d64f571370b400fb6a3ef1bf6e4c099a",
          "linkedWithoutMetadata": "00b63ba3d0a4d6d17cdab9b99f66d859d64f571370b400fb6a3ef1bf6e4c099a"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "UpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "25052e6c4f630887c11f9baff386be32b1e7f2e1472e8db0e59522573855568a",
          "withoutMetadata": "25052e6c4f630887c11f9baff386be32b1e7f2e1472e8db0e59522573855568a",
          "linkedWithoutMetadata": "25052e6c4f630887c11f9baff386be32b1e7f2e1472e8db0e59522573855568a"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "790d4072cf53aac2a13d463aff8642e395a254f41b5fb697aa08d18c98d6c650",
          "withoutMetadata": "25f43c7a410895c60d388fa63b92b4b9651fdb75b63ecf6cd24e63245917e5a0",
          "linkedWithoutMetadata": "25f43c7a410895c60d388fa63b92b4b9651fdb75b63ecf6cd24e63245917e5a0"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "bc3698c07e2c9be0b538ccffb3354417e76426adddd53d8b151b8deb4669be5f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "a5dc8b8a61076d759e3bb3d75e3edc9e386a2ab1751c35dbf3f2a1fa6dd6f927",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainUpgradeableProxy": {
        "src": "contracts/CrossChainUpgradeableProxy.sol:10",
        "version": {
          "withMetadata": "7581b8729b5fcbb07fe1e396e120f0a7d3311c6ee0f0c13bcbd74024902caacc",
          "withoutMetadata": "7581b8729b5fcbb07fe1e396e120f0a7d3311c6ee0f0c13bcbd74024902caacc",
          "linkedWithoutMetadata": "7581b8729b5fcbb07fe1e396e120f0a7d3311c6ee0f0c13bcbd74024902caacc"
        },
        "inherit": [
          "CrossChainGuard",
          "TransparentUpgradeableProxy",
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CrossChainUpgradeableProxy",
            "src": "contracts/CrossChainUpgradeableProxy.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHasher": {
        "src": "contracts/MerkleTreeWithHistory.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poseidon(bytes32[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MerkleTreeWithHistory": {
        "src": "contracts/MerkleTreeWithHistory.sol:21",
        "version": {
          "withMetadata": "6c6fe2d27ea144409919b0dfc309f8458f2af8f5b27aac1249652c25afb60aeb",
          "withoutMetadata": "6c6fe2d27ea144409919b0dfc309f8458f2af8f5b27aac1249652c25afb60aeb",
          "linkedWithoutMetadata": "6c6fe2d27ea144409919b0dfc309f8458f2af8f5b27aac1249652c25afb60aeb"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(uint32,address)",
          "hashLeftRight(bytes32,bytes32)",
          "isKnownRoot(bytes32)",
          "getLastRoot()",
          "zeros(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MerkleTreeWithHistory",
            "src": "contracts/MerkleTreeWithHistory.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "hasher",
            "src": "contracts/MerkleTreeWithHistory.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "levels",
            "src": "contracts/MerkleTreeWithHistory.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "currentRootIndex",
            "src": "contracts/MerkleTreeWithHistory.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextIndex",
            "src": "contracts/MerkleTreeWithHistory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "filledSubtrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:33"
            },
            {
              "label": "roots",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:34"
            },
            {
              "label": "currentRootIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:36"
            },
            {
              "label": "nextIndex",
              "offset": 4,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:37"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MerkleTreeWithHistoryMock": {
        "src": "contracts/Mocks/MerkleTreeWithHistoryMock.sol:6",
        "version": {
          "withMetadata": "96f68464dd823fde04dd9448286bec1e1bdeaba523297b03f9f6e00faf97e1d0",
          "withoutMetadata": "96f68464dd823fde04dd9448286bec1e1bdeaba523297b03f9f6e00faf97e1d0",
          "linkedWithoutMetadata": "96f68464dd823fde04dd9448286bec1e1bdeaba523297b03f9f6e00faf97e1d0"
        },
        "inherit": [
          "MerkleTreeWithHistory",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(uint32,address)",
          "insert(bytes32,bytes32)",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MerkleTreeWithHistoryMock",
            "src": "contracts/Mocks/MerkleTreeWithHistoryMock.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "filledSubtrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:33"
            },
            {
              "label": "roots",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:34"
            },
            {
              "label": "currentRootIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:36"
            },
            {
              "label": "nextIndex",
              "offset": 4,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:37"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MockAMB": {
        "src": "contracts/Mocks/MockAMB.sol:7",
        "version": {
          "withMetadata": "ae2efcd8f7f56c4d579d7264623a4c872bfe0f96f45102eb617caada6bfc3868",
          "withoutMetadata": "1634b7b9a7cc7069cce3256dfbeaff4594cfd4296b916f8e7437018ca173846d",
          "linkedWithoutMetadata": "1634b7b9a7cc7069cce3256dfbeaff4594cfd4296b916f8e7437018ca173846d"
        },
        "inherit": [
          "IAMB"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "setMessageSender(address)",
          "messageSender()",
          "messageSourceChainId()",
          "execute(struct MockAMB.Call[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockAMB",
            "src": "contracts/Mocks/MockAMB.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "xDomainMessageSender",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockAMB",
              "src": "contracts/Mocks/MockAMB.sol:8"
            },
            {
              "label": "xDomainMessageChainId",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "MockAMB",
              "src": "contracts/Mocks/MockAMB.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MockOmniBridge": {
        "src": "contracts/Mocks/MockOmniBridge.sol:7",
        "version": {
          "withMetadata": "93cc17e4523b22defc6591e1b985b07c660130d5269073900bc1db7b3bcb3a35",
          "withoutMetadata": "743dca34f8735a9b7e3b8cbaf60c8ebc2ede689b775cc6443459a5fff4309117",
          "linkedWithoutMetadata": "743dca34f8735a9b7e3b8cbaf60c8ebc2ede689b775cc6443459a5fff4309117"
        },
        "inherit": [
          "IOmniBridge"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "bridgeContract()",
          "execute(struct MockOmniBridge.Call[])",
          "onTokenTransfer(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockOmniBridge",
            "src": "contracts/Mocks/MockOmniBridge.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "AMB",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IAMB)4550",
              "contract": "MockOmniBridge",
              "src": "contracts/Mocks/MockOmniBridge.sol:8"
            }
          ],
          "types": {
            "t_contract(IAMB)4550": {
              "label": "contract IAMB",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETH": {
        "src": "contracts/Mocks/WETH.sol:7",
        "version": {
          "withMetadata": "b6e7deab268862c1bb6c5006310981f20cb1ad0ad57ded32f3be28432f507ee3",
          "withoutMetadata": "9baafd7d5b1b07389921679bd5662e43ccde25bf7270ae3ce078529d8dc797d1",
          "linkedWithoutMetadata": "9baafd7d5b1b07389921679bd5662e43ccde25bf7270ae3ce078529d8dc797d1"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETH",
            "src": "contracts/Mocks/WETH.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TornadoPool": {
        "src": "contracts/TornadoPool.sol:25",
        "version": {
          "withMetadata": "4e6899efdb909852c51ffd2938807b563af8a062e575136c4eec21e3f19048a6",
          "withoutMetadata": "4e6899efdb909852c51ffd2938807b563af8a062e575136c4eec21e3f19048a6",
          "linkedWithoutMetadata": "4e6899efdb909852c51ffd2938807b563af8a062e575136c4eec21e3f19048a6"
        },
        "inherit": [
          "CrossChainGuard",
          "ReentrancyGuard",
          "IERC20Receiver",
          "MerkleTreeWithHistory",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint32,address,address,address,address,address,uint256,address)",
          "initialize(uint256)",
          "transact((bytes,bytes32,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes,bool,uint256))",
          "register((address,bytes))",
          "registerAndTransact((address,bytes),(bytes,bytes32,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes,bool,uint256))",
          "onTokenBridged(address,uint256,bytes)",
          "onTransact((bytes,bytes32,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes,bool,uint256))",
          "rescueTokens(address,address payable,uint256)",
          "configureLimits(uint256)",
          "calculatePublicAmount(int256,uint256)",
          "isSpent(bytes32)",
          "verifyProof((bytes,bytes32,bytes32[],bytes32[2],uint256,bytes32))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TornadoPool",
            "src": "contracts/TornadoPool.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "verifier2",
            "src": "contracts/TornadoPool.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "verifier16",
            "src": "contracts/TornadoPool.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/TornadoPool.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "omniBridge",
            "src": "contracts/TornadoPool.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "l1Unwrapper",
            "src": "contracts/TornadoPool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "multisig",
            "src": "contracts/TornadoPool.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "filledSubtrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:33"
            },
            {
              "label": "roots",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:34"
            },
            {
              "label": "currentRootIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:36"
            },
            {
              "label": "nextIndex",
              "offset": 4,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:37"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            },
            {
              "label": "lastBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TornadoPool",
              "src": "contracts/TornadoPool.sol:37"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TornadoPool",
              "src": "contracts/TornadoPool.sol:38"
            },
            {
              "label": "maximumDepositAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TornadoPool",
              "src": "contracts/TornadoPool.sol:39"
            },
            {
              "label": "nullifierHashes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "TornadoPool",
              "src": "contracts/TornadoPool.sol:40"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainGuard": {
        "src": "contracts/bridge/CrossChainGuard.sol:9",
        "version": {
          "withMetadata": "0b32bf2d1d0af0b5bb1ad35ab884af52f2c9cb53012a6e424bf3cf709259758a",
          "withoutMetadata": "d27a6321a7ffa6f92e7494363cbc7bbac983633d8c673ce5646cf8cf3df750a5",
          "linkedWithoutMetadata": "d27a6321a7ffa6f92e7494363cbc7bbac983633d8c673ce5646cf8cf3df750a5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "isCalledByOwner()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CrossChainGuard",
            "src": "contracts/bridge/CrossChainGuard.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ambBridge",
            "src": "contracts/bridge/CrossChainGuard.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ownerChainId",
            "src": "contracts/bridge/CrossChainGuard.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/bridge/CrossChainGuard.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAMB": {
        "src": "contracts/interfaces/IBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "messageSender()",
          "messageSourceChainId()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Receiver": {
        "src": "contracts/interfaces/IBridge.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onTokenBridged(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC6777": {
        "src": "contracts/interfaces/IBridge.sol:16",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IOmniBridge": {
        "src": "contracts/interfaces/IBridge.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "bridgeContract()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVerifier": {
        "src": "contracts/interfaces/IVerifier.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes,uint256[7])",
          "verifyProof(bytes,uint256[21])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "bd30e7c0075eb5518b5bfe9ab842660cad5befbb0fce1528bd045eae9436d483",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "530a04a56fa28b9d133520cb27757f7a6a4763f01a218889d6d8109cb15aca3a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "be6d357f317f33962e12e6be2c4a5290920134829eeb297c70df9d7998bc0d37",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "L1Unwrapper": {
        "src": "contracts/bridge/L1Unwrapper.sol:20",
        "version": {
          "withMetadata": "a4ca6739b52b2ee646b83c92d1ec115aabbb1b77e6b939f68e2c034112710538",
          "withoutMetadata": "18f7562ba25d0ad7a5eaa73af414db9b4534d3e6c7eca8444c2949a64c4bef20",
          "linkedWithoutMetadata": "18f7562ba25d0ad7a5eaa73af414db9b4534d3e6c7eca8444c2949a64c4bef20"
        },
        "inherit": [
          "WETHOmnibridgeRouter",
          "Claimable",
          "OwnableModule"
        ],
        "libraries": [
          "SafeMath",
          "AddressHelper"
        ],
        "methods": [
          "(address,address,address)",
          "register((address,bytes))",
          "wrapAndRelayTokens(address,bytes,(address,bytes))",
          "onTokenBridged(address,uint256,bytes)",
          "setL1FeeReceiver(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "L1Unwrapper",
            "src": "contracts/bridge/L1Unwrapper.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableModule",
              "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:10"
            },
            {
              "label": "l1FeeReceiver",
              "offset": 0,
              "slot": "1",
              "type": "t_address_payable",
              "contract": "L1Unwrapper",
              "src": "contracts/bridge/L1Unwrapper.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETHOmnibridgeRouter": {
        "src": "omnibridge/contracts/helpers/WETHOmnibridgeRouter.sol:18",
        "version": {
          "withMetadata": "106ba4b40106471be28f04d70b50ce3b4ee0404254172028694b659328a991b7",
          "withoutMetadata": "774556e8df3c1d2ab2d5815badca9d0f9aeef02e6df4c03043ea844327d12171",
          "linkedWithoutMetadata": "774556e8df3c1d2ab2d5815badca9d0f9aeef02e6df4c03043ea844327d12171"
        },
        "inherit": [
          "Claimable",
          "OwnableModule"
        ],
        "libraries": [
          "Bytes",
          "AddressHelper"
        ],
        "methods": [
          "(address,address,address)",
          "wrapAndRelayTokens()",
          "wrapAndRelayTokens(address)",
          "wrapAndRelayTokens(address,bytes)",
          "onTokenBridged(address,uint256,bytes)",
          "claimTokens(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHOmnibridgeRouter",
            "src": "omnibridge/contracts/helpers/WETHOmnibridgeRouter.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "bridge",
            "src": "omnibridge/contracts/helpers/WETHOmnibridgeRouter.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "omnibridge/contracts/helpers/WETHOmnibridgeRouter.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableModule",
              "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IOmnibridge": {
        "src": "omnibridge/contracts/interfaces/IOmnibridge.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "relayTokens(address,address,uint256)",
          "relayTokensAndCall(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH": {
        "src": "omnibridge/contracts/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressHelper": {
        "src": "omnibridge/contracts/libraries/AddressHelper.sol:9",
        "version": {
          "withMetadata": "7f46cd17164c84b23ce4191cf78221e27a81117209ec64d8ce8dcd6447cf8fd0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Bytes": {
        "src": "omnibridge/contracts/libraries/Bytes.sol:7",
        "version": {
          "withMetadata": "20cca497d4b0b8075020711cf29159b62d9ba29c926f44cc89cc7c51b6c49f14",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Claimable": {
        "src": "omnibridge/contracts/upgradeable_contracts/Claimable.sol:10",
        "version": {
          "withMetadata": "86ccc4d76233d4af30719d40fc23de6562f832b62a55c2e9165fe851aa70f714",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20",
          "AddressHelper"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sacrifice": {
        "src": "omnibridge/contracts/upgradeable_contracts/Sacrifice.sol:3",
        "version": {
          "withMetadata": "6b39dec4e5c38a172a628b1406ce6ae4e74b349303b399d8780301ce1251b304",
          "withoutMetadata": "6b39dec4e5c38a172a628b1406ce6ae4e74b349303b399d8780301ce1251b304",
          "linkedWithoutMetadata": "6b39dec4e5c38a172a628b1406ce6ae4e74b349303b399d8780301ce1251b304"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Sacrifice",
            "src": "omnibridge/contracts/upgradeable_contracts/Sacrifice.sol:4"
          },
          {
            "kind": "selfdestruct",
            "src": "omnibridge/contracts/upgradeable_contracts/Sacrifice.sol:5"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OwnableModule": {
        "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:9",
        "version": {
          "withMetadata": "0fa2ab5c88ffde16e3342c288a9338e7634822383abf91f633d968fab2660136",
          "withoutMetadata": "8325e55887bfd25e4cb0b852b3b41be2ec82ae85a0cccdf60ec0b5c23be8c572",
          "linkedWithoutMetadata": "8325e55887bfd25e4cb0b852b3b41be2ec82ae85a0cccdf60ec0b5c23be8c572"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OwnableModule",
            "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableModule",
              "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Mocks/ERC677.sol:486",
        "version": {
          "withMetadata": "4f3fd540e3de873436f25d2e98e6e4a58d49105bacdfcb136caec5ba6ec63997",
          "withoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688",
          "linkedWithoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUtils": {
        "src": "contracts/Mocks/ERC677.sol:414",
        "version": {
          "withMetadata": "3a15cc42f39df5293011df5e405038f22f9fc7559782c95472bf6604990a62fd",
          "withoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688",
          "linkedWithoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "BasicToken": {
        "src": "contracts/Mocks/ERC677.sol:81",
        "version": {
          "withMetadata": "5599bf62f40624e6045dfae5295f2f153aef54eecc2cfde543be73a0ae5a8fb3",
          "withoutMetadata": "dfc1b4266aaa4df0bcbec5e25bc0f573664a8bfbbb499a6464e9e3c47bfb8c54",
          "linkedWithoutMetadata": "dfc1b4266aaa4df0bcbec5e25bc0f573664a8bfbbb499a6464e9e3c47bfb8c54"
        },
        "inherit": [
          "ERC20Basic"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "totalSupply()",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BasicToken",
              "label": "balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Mocks/ERC677.sol:84"
            },
            {
              "contract": "BasicToken",
              "label": "totalSupply_",
              "type": "t_uint256",
              "src": "contracts/Mocks/ERC677.sol:86"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "BurnableToken": {
        "src": "contracts/Mocks/ERC677.sol:128",
        "version": {
          "withMetadata": "a99ead0ed87be3d6cc4abcc1bf4b00d5dbf7139382af1c40dcafa6a77a7f425f",
          "withoutMetadata": "651c81627e8091f52368d1231e4a7bada58f6088545fadc1fe3eae92b51082c8",
          "linkedWithoutMetadata": "651c81627e8091f52368d1231e4a7bada58f6088545fadc1fe3eae92b51082c8"
        },
        "inherit": [
          "BasicToken",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Claimable": {
        "src": "contracts/Mocks/ERC677.sol:503",
        "version": {
          "withMetadata": "6434ed12e88afc884db2dc0d991669fb4585a14e0992512f7d7a9afa2cdcaf8c",
          "withoutMetadata": "e79ba7e68314ca4cdb0cf9281176e8c10862dc1648a48cdc8dc35cd9ff39ac3d",
          "linkedWithoutMetadata": "e79ba7e68314ca4cdb0cf9281176e8c10862dc1648a48cdc8dc35cd9ff39ac3d"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DetailedERC20": {
        "src": "contracts/Mocks/ERC677.sol:391",
        "inherit": [
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "DetailedERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/Mocks/ERC677.sol:392"
            },
            {
              "contract": "DetailedERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/Mocks/ERC677.sol:393"
            },
            {
              "contract": "DetailedERC20",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts/Mocks/ERC677.sol:394"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20": {
        "src": "contracts/Mocks/ERC677.sol:159",
        "inherit": [
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Basic": {
        "src": "contracts/Mocks/ERC677.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC677": {
        "src": "contracts/Mocks/ERC677.sol:442",
        "inherit": [
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256,bytes)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC677BridgeToken": {
        "src": "contracts/Mocks/ERC677.sol:565",
        "version": {
          "withMetadata": "68e4fa10b961d70186b5c2f18fe3bc5d35ce11c214dbb15f69dbce262c45ee27",
          "withoutMetadata": "041a7ad07de72dad99b777fb4a8233531569ef7d622c33b9e678e73979b5327a",
          "linkedWithoutMetadata": "041a7ad07de72dad99b777fb4a8233531569ef7d622c33b9e678e73979b5327a"
        },
        "inherit": [
          "Claimable",
          "MintableToken",
          "Ownable",
          "StandardToken",
          "BurnableToken",
          "BasicToken",
          "DetailedERC20",
          "IBurnableMintableERC677Token",
          "ERC677",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [
          "AddressUtils"
        ],
        "methods": [
          "(string,string,uint8)",
          "bridgeContract()",
          "setBridgeContract(address)",
          "transferAndCall(address,uint256,bytes)",
          "getTokenInterfacesVersion()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "isBridge(address)",
          "finishMinting()",
          "renounceOwnership()",
          "claimTokens(address,address)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC677BridgeToken",
              "label": "bridgeContractAddr",
              "type": "t_address",
              "src": "contracts/Mocks/ERC677.sol:568"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBurnableMintableERC677Token": {
        "src": "contracts/Mocks/ERC677.sol:460",
        "inherit": [
          "ERC677",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "claimTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MintableToken": {
        "src": "contracts/Mocks/ERC677.sol:340",
        "version": {
          "withMetadata": "e79a0c868f3cdcfd65524956f47a96fa175ab23c1a738282de24f00401c64cb9",
          "withoutMetadata": "9ada4f7e65d90b0a6d33c6647ff886da403f4ac896015bcc677c441e8b18ce31",
          "linkedWithoutMetadata": "9ada4f7e65d90b0a6d33c6647ff886da403f4ac896015bcc677c441e8b18ce31"
        },
        "inherit": [
          "Ownable",
          "StandardToken",
          "BasicToken",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "finishMinting()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "mintingFinished",
            "src": "contracts/Mocks/ERC677.sol:344"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MintableToken",
              "label": "mintingFinished",
              "type": "t_bool",
              "src": "contracts/Mocks/ERC677.sol:344"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/Mocks/ERC677.sol:279",
        "version": {
          "withMetadata": "67e28c7520e868f7a5eb7d0d7412e5239ef33f8cd6639a5aa9925b03e3210635",
          "withoutMetadata": "2de005b594543b80d5823d6bbdd88a95e66927e5594e96912d8d554183292abc",
          "linkedWithoutMetadata": "2de005b594543b80d5823d6bbdd88a95e66927e5594e96912d8d554183292abc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Mocks/ERC677.sol:280"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "PermittableToken": {
        "src": "contracts/Mocks/ERC677.sol:697",
        "version": {
          "withMetadata": "1bec6be89bd8c9c0d7ca796ee446747b12f04702210207fa62d85c933c6ee99c",
          "withoutMetadata": "e38115ed4cbeffa215c0c7b544bbf2bf09c110ad0e51073aa68da2968f15859d",
          "linkedWithoutMetadata": "e38115ed4cbeffa215c0c7b544bbf2bf09c110ad0e51073aa68da2968f15859d"
        },
        "inherit": [
          "ERC677BridgeToken",
          "Claimable",
          "MintableToken",
          "Ownable",
          "StandardToken",
          "BurnableToken",
          "BasicToken",
          "DetailedERC20",
          "IBurnableMintableERC677Token",
          "ERC677",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,uint256)",
          "transferFrom(address,address,uint256)",
          "push(address,uint256)",
          "pull(address,uint256)",
          "move(address,address,uint256)",
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)",
          "getTokenInterfacesVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PermittableToken",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/Mocks/ERC677.sol:701"
            },
            {
              "contract": "PermittableToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Mocks/ERC677.sol:705"
            },
            {
              "contract": "PermittableToken",
              "label": "expirations",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Mocks/ERC677.sol:706"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sacrifice": {
        "src": "contracts/Mocks/ERC677.sol:472",
        "version": {
          "withMetadata": "c519a206217016c59598a7f3e497a254bb7ecc8d865237edae939e201f8470f4",
          "withoutMetadata": "c519a206217016c59598a7f3e497a254bb7ecc8d865237edae939e201f8470f4",
          "linkedWithoutMetadata": "c519a206217016c59598a7f3e497a254bb7ecc8d865237edae939e201f8470f4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "selfdestruct",
            "src": "contracts/Mocks/ERC677.sol:474"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "contracts/Mocks/ERC677.sol:28",
        "version": {
          "withMetadata": "aae5581819e348129cecbf274f37d233efac13a102b1de239177167161bb8662",
          "withoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688",
          "linkedWithoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StandardToken": {
        "src": "contracts/Mocks/ERC677.sol:184",
        "version": {
          "withMetadata": "bd4454ab48cc60e3e9aab1f1994da8059a2dffc1d6a854b9ecc920be2cf939ac",
          "withoutMetadata": "19827057dd0e4e8b8789b3e245e105cfb96ab427623f367542b9c7d23150600d",
          "linkedWithoutMetadata": "19827057dd0e4e8b8789b3e245e105cfb96ab427623f367542b9c7d23150600d"
        },
        "inherit": [
          "BasicToken",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "increaseApproval(address,uint256)",
          "decreaseApproval(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StandardToken",
              "label": "allowed",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Mocks/ERC677.sol:185"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "SingletonFactory": {
        "src": "contracts/libraries/SingletonFactory.sol:14",
        "version": {
          "withMetadata": "8b1ba8fce3849df15bd6a25dc0b1124bce0ee1657885931fb5076ac82f6c2417",
          "withoutMetadata": "56dfbf37f5f19753b6726ba88802c618ffcea11b4eeb454d6342dd71c389714a",
          "linkedWithoutMetadata": "56dfbf37f5f19753b6726ba88802c618ffcea11b4eeb454d6342dd71c389714a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deploy(bytes,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "7f49b3f46d07d6efdba49d18c574392b28158d3374784c52fff6e42162c9052c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "29bd83f15a9dad82640aada1109b5932e0e69a6fe646c7f52d210b9c4c7dc510",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "00b63ba3d0a4d6d17cdab9b99f66d859d64f571370b400fb6a3ef1bf6e4c099a",
          "withoutMetadata": "00b63ba3d0a4d6d17cdab9b99f66d859d64f571370b400fb6a3ef1bf6e4c099a",
          "linkedWithoutMetadata": "00b63ba3d0a4d6d17cdab9b99f66d859d64f571370b400fb6a3ef1bf6e4c099a"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "UpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "25052e6c4f630887c11f9baff386be32b1e7f2e1472e8db0e59522573855568a",
          "withoutMetadata": "25052e6c4f630887c11f9baff386be32b1e7f2e1472e8db0e59522573855568a",
          "linkedWithoutMetadata": "25052e6c4f630887c11f9baff386be32b1e7f2e1472e8db0e59522573855568a"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "790d4072cf53aac2a13d463aff8642e395a254f41b5fb697aa08d18c98d6c650",
          "withoutMetadata": "25f43c7a410895c60d388fa63b92b4b9651fdb75b63ecf6cd24e63245917e5a0",
          "linkedWithoutMetadata": "25f43c7a410895c60d388fa63b92b4b9651fdb75b63ecf6cd24e63245917e5a0"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "bc3698c07e2c9be0b538ccffb3354417e76426adddd53d8b151b8deb4669be5f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "a5dc8b8a61076d759e3bb3d75e3edc9e386a2ab1751c35dbf3f2a1fa6dd6f927",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainUpgradeableProxy": {
        "src": "contracts/CrossChainUpgradeableProxy.sol:10",
        "version": {
          "withMetadata": "7581b8729b5fcbb07fe1e396e120f0a7d3311c6ee0f0c13bcbd74024902caacc",
          "withoutMetadata": "7581b8729b5fcbb07fe1e396e120f0a7d3311c6ee0f0c13bcbd74024902caacc",
          "linkedWithoutMetadata": "7581b8729b5fcbb07fe1e396e120f0a7d3311c6ee0f0c13bcbd74024902caacc"
        },
        "inherit": [
          "CrossChainGuard",
          "TransparentUpgradeableProxy",
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CrossChainUpgradeableProxy",
            "src": "contracts/CrossChainUpgradeableProxy.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHasher": {
        "src": "contracts/MerkleTreeWithHistory.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poseidon(bytes32[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MerkleTreeWithHistory": {
        "src": "contracts/MerkleTreeWithHistory.sol:21",
        "version": {
          "withMetadata": "6c6fe2d27ea144409919b0dfc309f8458f2af8f5b27aac1249652c25afb60aeb",
          "withoutMetadata": "6c6fe2d27ea144409919b0dfc309f8458f2af8f5b27aac1249652c25afb60aeb",
          "linkedWithoutMetadata": "6c6fe2d27ea144409919b0dfc309f8458f2af8f5b27aac1249652c25afb60aeb"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(uint32,address)",
          "hashLeftRight(bytes32,bytes32)",
          "isKnownRoot(bytes32)",
          "getLastRoot()",
          "zeros(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MerkleTreeWithHistory",
            "src": "contracts/MerkleTreeWithHistory.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "hasher",
            "src": "contracts/MerkleTreeWithHistory.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "levels",
            "src": "contracts/MerkleTreeWithHistory.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "currentRootIndex",
            "src": "contracts/MerkleTreeWithHistory.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextIndex",
            "src": "contracts/MerkleTreeWithHistory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "filledSubtrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:33"
            },
            {
              "label": "roots",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:34"
            },
            {
              "label": "currentRootIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:36"
            },
            {
              "label": "nextIndex",
              "offset": 4,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:37"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MerkleTreeWithHistoryMock": {
        "src": "contracts/Mocks/MerkleTreeWithHistoryMock.sol:6",
        "version": {
          "withMetadata": "96f68464dd823fde04dd9448286bec1e1bdeaba523297b03f9f6e00faf97e1d0",
          "withoutMetadata": "96f68464dd823fde04dd9448286bec1e1bdeaba523297b03f9f6e00faf97e1d0",
          "linkedWithoutMetadata": "96f68464dd823fde04dd9448286bec1e1bdeaba523297b03f9f6e00faf97e1d0"
        },
        "inherit": [
          "MerkleTreeWithHistory",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(uint32,address)",
          "insert(bytes32,bytes32)",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MerkleTreeWithHistoryMock",
            "src": "contracts/Mocks/MerkleTreeWithHistoryMock.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "filledSubtrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:33"
            },
            {
              "label": "roots",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:34"
            },
            {
              "label": "currentRootIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:36"
            },
            {
              "label": "nextIndex",
              "offset": 4,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:37"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MockAMB": {
        "src": "contracts/Mocks/MockAMB.sol:7",
        "version": {
          "withMetadata": "ae2efcd8f7f56c4d579d7264623a4c872bfe0f96f45102eb617caada6bfc3868",
          "withoutMetadata": "1634b7b9a7cc7069cce3256dfbeaff4594cfd4296b916f8e7437018ca173846d",
          "linkedWithoutMetadata": "1634b7b9a7cc7069cce3256dfbeaff4594cfd4296b916f8e7437018ca173846d"
        },
        "inherit": [
          "IAMB"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "setMessageSender(address)",
          "messageSender()",
          "messageSourceChainId()",
          "execute(struct MockAMB.Call[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockAMB",
            "src": "contracts/Mocks/MockAMB.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "xDomainMessageSender",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockAMB",
              "src": "contracts/Mocks/MockAMB.sol:8"
            },
            {
              "label": "xDomainMessageChainId",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "MockAMB",
              "src": "contracts/Mocks/MockAMB.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MockOmniBridge": {
        "src": "contracts/Mocks/MockOmniBridge.sol:7",
        "version": {
          "withMetadata": "93cc17e4523b22defc6591e1b985b07c660130d5269073900bc1db7b3bcb3a35",
          "withoutMetadata": "743dca34f8735a9b7e3b8cbaf60c8ebc2ede689b775cc6443459a5fff4309117",
          "linkedWithoutMetadata": "743dca34f8735a9b7e3b8cbaf60c8ebc2ede689b775cc6443459a5fff4309117"
        },
        "inherit": [
          "IOmniBridge"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "bridgeContract()",
          "execute(struct MockOmniBridge.Call[])",
          "onTokenTransfer(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockOmniBridge",
            "src": "contracts/Mocks/MockOmniBridge.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "AMB",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IAMB)4550",
              "contract": "MockOmniBridge",
              "src": "contracts/Mocks/MockOmniBridge.sol:8"
            }
          ],
          "types": {
            "t_contract(IAMB)4550": {
              "label": "contract IAMB",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETH": {
        "src": "contracts/Mocks/WETH.sol:7",
        "version": {
          "withMetadata": "b6e7deab268862c1bb6c5006310981f20cb1ad0ad57ded32f3be28432f507ee3",
          "withoutMetadata": "9baafd7d5b1b07389921679bd5662e43ccde25bf7270ae3ce078529d8dc797d1",
          "linkedWithoutMetadata": "9baafd7d5b1b07389921679bd5662e43ccde25bf7270ae3ce078529d8dc797d1"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETH",
            "src": "contracts/Mocks/WETH.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TornadoPool": {
        "src": "contracts/TornadoPool.sol:25",
        "version": {
          "withMetadata": "4e6899efdb909852c51ffd2938807b563af8a062e575136c4eec21e3f19048a6",
          "withoutMetadata": "4e6899efdb909852c51ffd2938807b563af8a062e575136c4eec21e3f19048a6",
          "linkedWithoutMetadata": "4e6899efdb909852c51ffd2938807b563af8a062e575136c4eec21e3f19048a6"
        },
        "inherit": [
          "CrossChainGuard",
          "ReentrancyGuard",
          "IERC20Receiver",
          "MerkleTreeWithHistory",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint32,address,address,address,address,address,uint256,address)",
          "initialize(uint256)",
          "transact((bytes,bytes32,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes,bool,uint256))",
          "register((address,bytes))",
          "registerAndTransact((address,bytes),(bytes,bytes32,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes,bool,uint256))",
          "onTokenBridged(address,uint256,bytes)",
          "onTransact((bytes,bytes32,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes,bool,uint256))",
          "rescueTokens(address,address payable,uint256)",
          "configureLimits(uint256)",
          "calculatePublicAmount(int256,uint256)",
          "isSpent(bytes32)",
          "verifyProof((bytes,bytes32,bytes32[],bytes32[2],uint256,bytes32))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TornadoPool",
            "src": "contracts/TornadoPool.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "verifier2",
            "src": "contracts/TornadoPool.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "verifier16",
            "src": "contracts/TornadoPool.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/TornadoPool.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "omniBridge",
            "src": "contracts/TornadoPool.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "l1Unwrapper",
            "src": "contracts/TornadoPool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "multisig",
            "src": "contracts/TornadoPool.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "filledSubtrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:33"
            },
            {
              "label": "roots",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:34"
            },
            {
              "label": "currentRootIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:36"
            },
            {
              "label": "nextIndex",
              "offset": 4,
              "slot": "3",
              "type": "t_uint32",
              "contract": "MerkleTreeWithHistory",
              "src": "contracts/MerkleTreeWithHistory.sol:37"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            },
            {
              "label": "lastBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TornadoPool",
              "src": "contracts/TornadoPool.sol:37"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TornadoPool",
              "src": "contracts/TornadoPool.sol:38"
            },
            {
              "label": "maximumDepositAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TornadoPool",
              "src": "contracts/TornadoPool.sol:39"
            },
            {
              "label": "nullifierHashes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "TornadoPool",
              "src": "contracts/TornadoPool.sol:40"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CrossChainGuard": {
        "src": "contracts/bridge/CrossChainGuard.sol:9",
        "version": {
          "withMetadata": "0b32bf2d1d0af0b5bb1ad35ab884af52f2c9cb53012a6e424bf3cf709259758a",
          "withoutMetadata": "d27a6321a7ffa6f92e7494363cbc7bbac983633d8c673ce5646cf8cf3df750a5",
          "linkedWithoutMetadata": "d27a6321a7ffa6f92e7494363cbc7bbac983633d8c673ce5646cf8cf3df750a5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "isCalledByOwner()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CrossChainGuard",
            "src": "contracts/bridge/CrossChainGuard.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ambBridge",
            "src": "contracts/bridge/CrossChainGuard.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ownerChainId",
            "src": "contracts/bridge/CrossChainGuard.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/bridge/CrossChainGuard.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IAMB": {
        "src": "contracts/interfaces/IBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "messageSender()",
          "messageSourceChainId()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Receiver": {
        "src": "contracts/interfaces/IBridge.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onTokenBridged(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC6777": {
        "src": "contracts/interfaces/IBridge.sol:16",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IOmniBridge": {
        "src": "contracts/interfaces/IBridge.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "bridgeContract()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVerifier": {
        "src": "contracts/interfaces/IVerifier.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes,uint256[7])",
          "verifyProof(bytes,uint256[21])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "bd30e7c0075eb5518b5bfe9ab842660cad5befbb0fce1528bd045eae9436d483",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "530a04a56fa28b9d133520cb27757f7a6a4763f01a218889d6d8109cb15aca3a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "be6d357f317f33962e12e6be2c4a5290920134829eeb297c70df9d7998bc0d37",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "L1Unwrapper": {
        "src": "contracts/bridge/L1Unwrapper.sol:20",
        "version": {
          "withMetadata": "a4ca6739b52b2ee646b83c92d1ec115aabbb1b77e6b939f68e2c034112710538",
          "withoutMetadata": "18f7562ba25d0ad7a5eaa73af414db9b4534d3e6c7eca8444c2949a64c4bef20",
          "linkedWithoutMetadata": "18f7562ba25d0ad7a5eaa73af414db9b4534d3e6c7eca8444c2949a64c4bef20"
        },
        "inherit": [
          "WETHOmnibridgeRouter",
          "Claimable",
          "OwnableModule"
        ],
        "libraries": [
          "SafeMath",
          "AddressHelper"
        ],
        "methods": [
          "(address,address,address)",
          "register((address,bytes))",
          "wrapAndRelayTokens(address,bytes,(address,bytes))",
          "onTokenBridged(address,uint256,bytes)",
          "setL1FeeReceiver(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "L1Unwrapper",
            "src": "contracts/bridge/L1Unwrapper.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableModule",
              "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:10"
            },
            {
              "label": "l1FeeReceiver",
              "offset": 0,
              "slot": "1",
              "type": "t_address_payable",
              "contract": "L1Unwrapper",
              "src": "contracts/bridge/L1Unwrapper.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "WETHOmnibridgeRouter": {
        "src": "omnibridge/contracts/helpers/WETHOmnibridgeRouter.sol:18",
        "version": {
          "withMetadata": "106ba4b40106471be28f04d70b50ce3b4ee0404254172028694b659328a991b7",
          "withoutMetadata": "774556e8df3c1d2ab2d5815badca9d0f9aeef02e6df4c03043ea844327d12171",
          "linkedWithoutMetadata": "774556e8df3c1d2ab2d5815badca9d0f9aeef02e6df4c03043ea844327d12171"
        },
        "inherit": [
          "Claimable",
          "OwnableModule"
        ],
        "libraries": [
          "Bytes",
          "AddressHelper"
        ],
        "methods": [
          "(address,address,address)",
          "wrapAndRelayTokens()",
          "wrapAndRelayTokens(address)",
          "wrapAndRelayTokens(address,bytes)",
          "onTokenBridged(address,uint256,bytes)",
          "claimTokens(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHOmnibridgeRouter",
            "src": "omnibridge/contracts/helpers/WETHOmnibridgeRouter.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "bridge",
            "src": "omnibridge/contracts/helpers/WETHOmnibridgeRouter.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "omnibridge/contracts/helpers/WETHOmnibridgeRouter.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableModule",
              "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IOmnibridge": {
        "src": "omnibridge/contracts/interfaces/IOmnibridge.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "relayTokens(address,address,uint256)",
          "relayTokensAndCall(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWETH": {
        "src": "omnibridge/contracts/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressHelper": {
        "src": "omnibridge/contracts/libraries/AddressHelper.sol:9",
        "version": {
          "withMetadata": "7f46cd17164c84b23ce4191cf78221e27a81117209ec64d8ce8dcd6447cf8fd0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Bytes": {
        "src": "omnibridge/contracts/libraries/Bytes.sol:7",
        "version": {
          "withMetadata": "20cca497d4b0b8075020711cf29159b62d9ba29c926f44cc89cc7c51b6c49f14",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Claimable": {
        "src": "omnibridge/contracts/upgradeable_contracts/Claimable.sol:10",
        "version": {
          "withMetadata": "86ccc4d76233d4af30719d40fc23de6562f832b62a55c2e9165fe851aa70f714",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20",
          "AddressHelper"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sacrifice": {
        "src": "omnibridge/contracts/upgradeable_contracts/Sacrifice.sol:3",
        "version": {
          "withMetadata": "6b39dec4e5c38a172a628b1406ce6ae4e74b349303b399d8780301ce1251b304",
          "withoutMetadata": "6b39dec4e5c38a172a628b1406ce6ae4e74b349303b399d8780301ce1251b304",
          "linkedWithoutMetadata": "6b39dec4e5c38a172a628b1406ce6ae4e74b349303b399d8780301ce1251b304"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Sacrifice",
            "src": "omnibridge/contracts/upgradeable_contracts/Sacrifice.sol:4"
          },
          {
            "kind": "selfdestruct",
            "src": "omnibridge/contracts/upgradeable_contracts/Sacrifice.sol:5"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OwnableModule": {
        "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:9",
        "version": {
          "withMetadata": "0fa2ab5c88ffde16e3342c288a9338e7634822383abf91f633d968fab2660136",
          "withoutMetadata": "8325e55887bfd25e4cb0b852b3b41be2ec82ae85a0cccdf60ec0b5c23be8c572",
          "linkedWithoutMetadata": "8325e55887bfd25e4cb0b852b3b41be2ec82ae85a0cccdf60ec0b5c23be8c572"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OwnableModule",
            "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableModule",
              "src": "omnibridge/contracts/upgradeable_contracts/modules/OwnableModule.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Mocks/ERC677.sol:486",
        "version": {
          "withMetadata": "4f3fd540e3de873436f25d2e98e6e4a58d49105bacdfcb136caec5ba6ec63997",
          "withoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688",
          "linkedWithoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUtils": {
        "src": "contracts/Mocks/ERC677.sol:414",
        "version": {
          "withMetadata": "3a15cc42f39df5293011df5e405038f22f9fc7559782c95472bf6604990a62fd",
          "withoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688",
          "linkedWithoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "BasicToken": {
        "src": "contracts/Mocks/ERC677.sol:81",
        "version": {
          "withMetadata": "5599bf62f40624e6045dfae5295f2f153aef54eecc2cfde543be73a0ae5a8fb3",
          "withoutMetadata": "dfc1b4266aaa4df0bcbec5e25bc0f573664a8bfbbb499a6464e9e3c47bfb8c54",
          "linkedWithoutMetadata": "dfc1b4266aaa4df0bcbec5e25bc0f573664a8bfbbb499a6464e9e3c47bfb8c54"
        },
        "inherit": [
          "ERC20Basic"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "totalSupply()",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BasicToken",
              "label": "balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Mocks/ERC677.sol:84"
            },
            {
              "contract": "BasicToken",
              "label": "totalSupply_",
              "type": "t_uint256",
              "src": "contracts/Mocks/ERC677.sol:86"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "BurnableToken": {
        "src": "contracts/Mocks/ERC677.sol:128",
        "version": {
          "withMetadata": "a99ead0ed87be3d6cc4abcc1bf4b00d5dbf7139382af1c40dcafa6a77a7f425f",
          "withoutMetadata": "651c81627e8091f52368d1231e4a7bada58f6088545fadc1fe3eae92b51082c8",
          "linkedWithoutMetadata": "651c81627e8091f52368d1231e4a7bada58f6088545fadc1fe3eae92b51082c8"
        },
        "inherit": [
          "BasicToken",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Claimable": {
        "src": "contracts/Mocks/ERC677.sol:503",
        "version": {
          "withMetadata": "6434ed12e88afc884db2dc0d991669fb4585a14e0992512f7d7a9afa2cdcaf8c",
          "withoutMetadata": "e79ba7e68314ca4cdb0cf9281176e8c10862dc1648a48cdc8dc35cd9ff39ac3d",
          "linkedWithoutMetadata": "e79ba7e68314ca4cdb0cf9281176e8c10862dc1648a48cdc8dc35cd9ff39ac3d"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DetailedERC20": {
        "src": "contracts/Mocks/ERC677.sol:391",
        "inherit": [
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "DetailedERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/Mocks/ERC677.sol:392"
            },
            {
              "contract": "DetailedERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/Mocks/ERC677.sol:393"
            },
            {
              "contract": "DetailedERC20",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts/Mocks/ERC677.sol:394"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20": {
        "src": "contracts/Mocks/ERC677.sol:159",
        "inherit": [
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Basic": {
        "src": "contracts/Mocks/ERC677.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC677": {
        "src": "contracts/Mocks/ERC677.sol:442",
        "inherit": [
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256,bytes)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC677BridgeToken": {
        "src": "contracts/Mocks/ERC677.sol:565",
        "version": {
          "withMetadata": "68e4fa10b961d70186b5c2f18fe3bc5d35ce11c214dbb15f69dbce262c45ee27",
          "withoutMetadata": "041a7ad07de72dad99b777fb4a8233531569ef7d622c33b9e678e73979b5327a",
          "linkedWithoutMetadata": "041a7ad07de72dad99b777fb4a8233531569ef7d622c33b9e678e73979b5327a"
        },
        "inherit": [
          "Claimable",
          "MintableToken",
          "Ownable",
          "StandardToken",
          "BurnableToken",
          "BasicToken",
          "DetailedERC20",
          "IBurnableMintableERC677Token",
          "ERC677",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [
          "AddressUtils"
        ],
        "methods": [
          "(string,string,uint8)",
          "bridgeContract()",
          "setBridgeContract(address)",
          "transferAndCall(address,uint256,bytes)",
          "getTokenInterfacesVersion()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "isBridge(address)",
          "finishMinting()",
          "renounceOwnership()",
          "claimTokens(address,address)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC677BridgeToken",
              "label": "bridgeContractAddr",
              "type": "t_address",
              "src": "contracts/Mocks/ERC677.sol:568"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBurnableMintableERC677Token": {
        "src": "contracts/Mocks/ERC677.sol:460",
        "inherit": [
          "ERC677",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "claimTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MintableToken": {
        "src": "contracts/Mocks/ERC677.sol:340",
        "version": {
          "withMetadata": "e79a0c868f3cdcfd65524956f47a96fa175ab23c1a738282de24f00401c64cb9",
          "withoutMetadata": "9ada4f7e65d90b0a6d33c6647ff886da403f4ac896015bcc677c441e8b18ce31",
          "linkedWithoutMetadata": "9ada4f7e65d90b0a6d33c6647ff886da403f4ac896015bcc677c441e8b18ce31"
        },
        "inherit": [
          "Ownable",
          "StandardToken",
          "BasicToken",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "finishMinting()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "mintingFinished",
            "src": "contracts/Mocks/ERC677.sol:344"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MintableToken",
              "label": "mintingFinished",
              "type": "t_bool",
              "src": "contracts/Mocks/ERC677.sol:344"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts/Mocks/ERC677.sol:279",
        "version": {
          "withMetadata": "67e28c7520e868f7a5eb7d0d7412e5239ef33f8cd6639a5aa9925b03e3210635",
          "withoutMetadata": "2de005b594543b80d5823d6bbdd88a95e66927e5594e96912d8d554183292abc",
          "linkedWithoutMetadata": "2de005b594543b80d5823d6bbdd88a95e66927e5594e96912d8d554183292abc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Mocks/ERC677.sol:280"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "PermittableToken": {
        "src": "contracts/Mocks/ERC677.sol:697",
        "version": {
          "withMetadata": "1bec6be89bd8c9c0d7ca796ee446747b12f04702210207fa62d85c933c6ee99c",
          "withoutMetadata": "e38115ed4cbeffa215c0c7b544bbf2bf09c110ad0e51073aa68da2968f15859d",
          "linkedWithoutMetadata": "e38115ed4cbeffa215c0c7b544bbf2bf09c110ad0e51073aa68da2968f15859d"
        },
        "inherit": [
          "ERC677BridgeToken",
          "Claimable",
          "MintableToken",
          "Ownable",
          "StandardToken",
          "BurnableToken",
          "BasicToken",
          "DetailedERC20",
          "IBurnableMintableERC677Token",
          "ERC677",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,uint256)",
          "transferFrom(address,address,uint256)",
          "push(address,uint256)",
          "pull(address,uint256)",
          "move(address,address,uint256)",
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)",
          "getTokenInterfacesVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PermittableToken",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/Mocks/ERC677.sol:701"
            },
            {
              "contract": "PermittableToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Mocks/ERC677.sol:705"
            },
            {
              "contract": "PermittableToken",
              "label": "expirations",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Mocks/ERC677.sol:706"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Sacrifice": {
        "src": "contracts/Mocks/ERC677.sol:472",
        "version": {
          "withMetadata": "c519a206217016c59598a7f3e497a254bb7ecc8d865237edae939e201f8470f4",
          "withoutMetadata": "c519a206217016c59598a7f3e497a254bb7ecc8d865237edae939e201f8470f4",
          "linkedWithoutMetadata": "c519a206217016c59598a7f3e497a254bb7ecc8d865237edae939e201f8470f4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "selfdestruct",
            "src": "contracts/Mocks/ERC677.sol:474"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "contracts/Mocks/ERC677.sol:28",
        "version": {
          "withMetadata": "aae5581819e348129cecbf274f37d233efac13a102b1de239177167161bb8662",
          "withoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688",
          "linkedWithoutMetadata": "6784c9bdde3ddff1c688b77760f8abee60b5ea4939b980505024050460e92688"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StandardToken": {
        "src": "contracts/Mocks/ERC677.sol:184",
        "version": {
          "withMetadata": "bd4454ab48cc60e3e9aab1f1994da8059a2dffc1d6a854b9ecc920be2cf939ac",
          "withoutMetadata": "19827057dd0e4e8b8789b3e245e105cfb96ab427623f367542b9c7d23150600d",
          "linkedWithoutMetadata": "19827057dd0e4e8b8789b3e245e105cfb96ab427623f367542b9c7d23150600d"
        },
        "inherit": [
          "BasicToken",
          "ERC20",
          "ERC20Basic"
        ],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)",
          "increaseApproval(address,uint256)",
          "decreaseApproval(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StandardToken",
              "label": "allowed",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Mocks/ERC677.sol:185"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "SingletonFactory": {
        "src": "contracts/libraries/SingletonFactory.sol:14",
        "version": {
          "withMetadata": "8b1ba8fce3849df15bd6a25dc0b1124bce0ee1657885931fb5076ac82f6c2417",
          "withoutMetadata": "56dfbf37f5f19753b6726ba88802c618ffcea11b4eeb454d6342dd71c389714a",
          "linkedWithoutMetadata": "56dfbf37f5f19753b6726ba88802c618ffcea11b4eeb454d6342dd71c389714a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deploy(bytes,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    }
  ]
}